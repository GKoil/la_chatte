// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$add-buttonpng-name: 'add-buttonpng';
$add-buttonpng-x: 0px;
$add-buttonpng-y: 138px;
$add-buttonpng-offset-x: 0px;
$add-buttonpng-offset-y: -138px;
$add-buttonpng-width: 30px;
$add-buttonpng-height: 33px;
$add-buttonpng-total-width: 207px;
$add-buttonpng-total-height: 171px;
$add-buttonpng-image: '../images/sprite@1x.png';
$add-buttonpng: (0px, 138px, 0px, -138px, 30px, 33px, 207px, 171px, '../images/sprite@1x.png', 'add-buttonpng', );
$basket-name: 'basket';
$basket-x: 30px;
$basket-y: 138px;
$basket-offset-x: -30px;
$basket-offset-y: -138px;
$basket-width: 23px;
$basket-height: 27px;
$basket-total-width: 207px;
$basket-total-height: 171px;
$basket-image: '../images/sprite@1x.png';
$basket: (30px, 138px, -30px, -138px, 23px, 27px, 207px, 171px, '../images/sprite@1x.png', 'basket', );
$circle-name: 'circle';
$circle-x: 68px;
$circle-y: 70px;
$circle-offset-x: -68px;
$circle-offset-y: -70px;
$circle-width: 65px;
$circle-height: 65px;
$circle-total-width: 207px;
$circle-total-height: 171px;
$circle-image: '../images/sprite@1x.png';
$circle: (68px, 70px, -68px, -70px, 65px, 65px, 207px, 171px, '../images/sprite@1x.png', 'circle', );
$like-name: 'like';
$like-x: 142px;
$like-y: 0px;
$like-offset-x: -142px;
$like-offset-y: 0px;
$like-width: 65px;
$like-height: 57px;
$like-total-width: 207px;
$like-total-height: 171px;
$like-image: '../images/sprite@1x.png';
$like: (142px, 0px, -142px, 0px, 65px, 57px, 207px, 171px, '../images/sprite@1x.png', 'like', );
$phone-name: 'phone';
$phone-x: 142px;
$phone-y: 114px;
$phone-offset-x: -142px;
$phone-offset-y: -114px;
$phone-width: 22px;
$phone-height: 22px;
$phone-total-width: 207px;
$phone-total-height: 171px;
$phone-image: '../images/sprite@1x.png';
$phone: (142px, 114px, -142px, -114px, 22px, 22px, 207px, 171px, '../images/sprite@1x.png', 'phone', );
$romb-name: 'romb';
$romb-x: 74px;
$romb-y: 0px;
$romb-offset-x: -74px;
$romb-offset-y: 0px;
$romb-width: 68px;
$romb-height: 68px;
$romb-total-width: 207px;
$romb-total-height: 171px;
$romb-image: '../images/sprite@1x.png';
$romb: (74px, 0px, -74px, 0px, 68px, 68px, 207px, 171px, '../images/sprite@1x.png', 'romb', );
$square-rotate-name: 'square-rotate';
$square-rotate-x: 0px;
$square-rotate-y: 70px;
$square-rotate-offset-x: 0px;
$square-rotate-offset-y: -70px;
$square-rotate-width: 68px;
$square-rotate-height: 68px;
$square-rotate-total-width: 207px;
$square-rotate-total-height: 171px;
$square-rotate-image: '../images/sprite@1x.png';
$square-rotate: (0px, 70px, 0px, -70px, 68px, 68px, 207px, 171px, '../images/sprite@1x.png', 'square-rotate', );
$square-name: 'square';
$square-x: 142px;
$square-y: 57px;
$square-offset-x: -142px;
$square-offset-y: -57px;
$square-width: 57px;
$square-height: 57px;
$square-total-width: 207px;
$square-total-height: 171px;
$square-image: '../images/sprite@1x.png';
$square: (142px, 57px, -142px, -57px, 57px, 57px, 207px, 171px, '../images/sprite@1x.png', 'square', );
$star-name: 'star';
$star-x: 0px;
$star-y: 0px;
$star-offset-x: 0px;
$star-offset-y: 0px;
$star-width: 74px;
$star-height: 70px;
$star-total-width: 207px;
$star-total-height: 171px;
$star-image: '../images/sprite@1x.png';
$star: (0px, 0px, 0px, 0px, 74px, 70px, 207px, 171px, '../images/sprite@1x.png', 'star', );
$spritesheet-width: 207px;
$spritesheet-height: 171px;
$spritesheet-image: '../images/sprite@1x.png';
$spritesheet-sprites: ($add-buttonpng, $basket, $circle, $like, $phone, $romb, $square-rotate, $square, $star, );
$spritesheet: (207px, 171px, '../images/sprite@1x.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
